[{"title":"第一次题解","path":"/2024/10/24/第一次题解/","content":"「安恒杯」第二届 NEX 网络安全理论赛WPINFO：计院の五维介质，已经亖了！|我菜死了#别炸我了QAQ 共解出8题 COMMON【简单】签到喵确实简单，海报下方…. …– .—- .. — ..–.- .– — .-. .—- -..摩斯电码，解码后为H31IO_WOR1D，提交即可。（说实话第一次知道下划线怎么打） 然后，就没有common了。。QAQ MATH【简单】凯撒超进化Vigenère cipher，这次geekgame也有，两种方法，一是查表，但说实话不如利用其特性可以根据nex这个前缀手动试出来key为ozu。 【中等】2024 爱护你的蟒蛇打开round1.py，发现储存flag的部分： 1234567enc = [……]def check_flag(text): text = list(text) for i in range(len(text)): text[i] = (ord(text[i]) ^ 0xCC) - 3 return text == enc 写出其的逆过程： 12345def de_flag(enc): text = &quot;&quot; for i in range(len(enc)): text += chr((enc[i] + 3) ^ 0xCC) return text 运行得flag。 也没了！菜死了我。 PWN【简单】浮屠塔的出口nc连上之后走个迷宫就没了。 PWN就这一题，两道中等题本地打通了，然后忘了 :P BINARY【简单】从零开始的 CPP 生活我不好说，但是。。。我之前为了正好装过vs，直接打开，vs帮我做完了。打开flag.cpp后： 123456789#include &quot;flag.hpp&quot;Flag::Flag() &#123;\tflag = &quot;flag&#123;b9bcd94c-2ee1-4e74-b8e2-372a10869adc&#125;&quot;;&#125;std::string Flag::GetFlag()&#123;\treturn this-&gt;flag;&#125; 【中等】开源逆向题喵打开程序，发现被挡住了，但是背景是像素字！然后看文件，一个醒目的flag.h，一打开，发现 1int flag_pixels[360][480] = &#123;……&#125; 欸，合理怀疑就是背景flag图片，写转为png脚本： 12345678from PIL import Imageimport numpy as npflag_pixels = [……]array = np.array(flag_pixels, dtype=np.uint8)img = Image.fromarray(array * 255, mode=&#x27;L&#x27;)img.show() 完事，感觉不像预期解，但是有没防，怪。 【简单】假面之下的 Flag呃呃，拖进ida -&gt; shift+F12查看字串 -&gt; 甚至第一个就是。 【困难】愤怒喵 NaN~我测，我一拖进ida，main函数那图一出来，我去，吓人。还是shift+F12查看字串起手，发现两终点： 12.rodata:000000000000B016\t00000007\tC\tN0N0N0.rodata:000000000000B010\t00000006\tC\tG00D! 可以写出判断终点函数： 12345def is_success(state): return b&#x27;G00D!&#x27; in state.posix.dumps(sys.stdout.fileno())def is_fail(state): return b&#x27;N0N0N0&#x27; in state.posix.dumps(sys.stdout.fileno()) 这样不用记地址。按f5反编分析main函数，发现以下语句： 12stream = fopen(&quot;flag.png&quot;, &quot;rb&quot;);fread(&amp;ptr, 1uLL, 0x142uLL, stream); 说明读入了一个大小为0x142的flag.png，可以在angr中模拟文件系统，创建一个flag.png的符号执行对象： 123file_size = 0x142symbolic_file = angr.storage.SimFile(&quot;flag.png&quot;, size=file_size)initial_state.fs.insert(&quot;flag.png&quot;, symbolic_file) 然后，跑就完事了！(框架是从文档里拿的) 12345678910111213141516171819202122232425262728293031323334353637import angrimport sysfrom PIL import Imageimport iodef Go(): path_to_binary = &quot;./mustangr/problem&quot; project = angr.Project(path_to_binary) initial_state = project.factory.entry_state() file_size = 0x142 symbolic_file = angr.storage.SimFile(&quot;flag.png&quot;, size=file_size) initial_state.fs.insert(&quot;flag.png&quot;, symbolic_file) simulation = project.factory.simgr(initial_state) def is_success(state): return b&#x27;G00D!&#x27; in state.posix.dumps(sys.stdout.fileno()) def is_fail(state): return b&#x27;N0N0N0&#x27; in state.posix.dumps(sys.stdout.fileno()) simulation.explore(find=is_success, avoid=is_fail) if simulation.found: solution_state = simulation.found[0] flag_content = solution_state.fs.get(&quot;flag.png&quot;).concretize() print(&quot;[+] Success! The flag content is: &#123;&#125;&quot;.format(flag_content)) image = Image.open(io.BytesIO(flag_content)) image.save(&quot;output.png&quot;) else: print(&quot;[-] Could not find the solution&quot;)if __name__ == &quot;__main__&quot;: Go() 其实vmp那题我也在尝试，已经打了很多函数了，但确实时间不够，没把逻辑看完QAQ。 小结感谢NEX带来的奇妙の小题。我菜死了，别炸我了QAQ！"},{"title":"Hello World","path":"/2024/10/23/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]